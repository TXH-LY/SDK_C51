C51 COMPILER V9.60.0.0   HW_IOCTRL                                                         06/25/2021 20:51:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW_IOCTRL
OBJECT MODULE PLACED IN .\Objects\hw_ioctrl.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\HW_Config\hw_ioctrl.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\
                    -HW_Config;..\..\HW_Driver\driver_header;..\..\HW_Driver;..\..\SDKProject;..\..\SW_Support;..\..\SW_Support\header;..\..\
                    -usercode) DEBUG OBJECTEXTEND PRINT(.\Listings\hw_ioctrl.lst) OBJECT(.\Objects\hw_ioctrl.obj)

line level    source

   1          #include "hw_ioctrl.h"
   2          
   3          #ifdef IOCTRL_CONFIG
   4          
   5          
   6          /* ------------------------------------------------------------ */
   7          
   8          
   9          
  10          /* ------------------------------------------------------------ */
  11          
  12          
  13          
  14          
  15          char io_ctrl_set_mode (IOPort Port, IOBit Bit, IOMode mode)
  16          {
  17   1          switch (Port)
  18   1          {
  19   2              case IO_P0: 
  20   2                  switch (mode)
  21   2                  {
  22   3                      case IO_IN_OUT_PUT:
  23   3                          IO_P0M0 = IO_IN_OUT_PUT_M0 << Bit;
  24   3                          IO_P0M1 = IO_IN_OUT_PUT_M1 << Bit;
  25   3                          break;
  26   3                      case IO_OUT_PUT_PP:
  27   3                          IO_P0M0 = IO_OUT_PUT_PP_M0 << Bit;
  28   3                          IO_P0M1 = IO_OUT_PUT_PP_M1 << Bit;
  29   3                          break;
  30   3                      case IO_IN_PUT_ONLY:
  31   3                          IO_P0M0 = IO_IN_PUT_ONLY_M0 << Bit;
  32   3                          IO_P0M1 = IO_IN_PUT_ONLY_M1 << Bit;
  33   3                          break;
  34   3                      case IO_OPEN_DRAIN:
  35   3                          IO_P0M0 = IO_OPEN_DRAIN_M0 << Bit;
  36   3                          IO_P0M1 = IO_OPEN_DRAIN_M1 << Bit;
  37   3                          break;
  38   3                      default:
  39   3                          break;
  40   3                  }
  41   2                  break;
  42   2              case IO_P1: 
  43   2                  switch (mode)
  44   2                  {
  45   3                      case IO_IN_OUT_PUT:
  46   3                          IO_P1M0 = IO_IN_OUT_PUT_M0 << Bit;
  47   3                          IO_P1M1 = IO_IN_OUT_PUT_M1 << Bit;
  48   3                          break;
  49   3                      case IO_OUT_PUT_PP:
  50   3                          IO_P1M0 = IO_OUT_PUT_PP_M0 << Bit;
  51   3                          IO_P1M1 = IO_OUT_PUT_PP_M1 << Bit;
  52   3                          break;
  53   3                      case IO_IN_PUT_ONLY:
C51 COMPILER V9.60.0.0   HW_IOCTRL                                                         06/25/2021 20:51:21 PAGE 2   

  54   3                          IO_P1M0 = IO_IN_PUT_ONLY_M0 << Bit;
  55   3                          IO_P1M1 = IO_IN_PUT_ONLY_M1 << Bit;
  56   3                          break;
  57   3                      case IO_OPEN_DRAIN:
  58   3                          IO_P1M0 = IO_OPEN_DRAIN_M0 << Bit;
  59   3                          IO_P1M1 = IO_OPEN_DRAIN_M1 << Bit;
  60   3                          break;
  61   3                      default:
  62   3                          break;
  63   3                  }
  64   2                  break;
  65   2              case IO_P2: 
  66   2                  switch (mode)
  67   2                  {
  68   3                      case IO_IN_OUT_PUT:
  69   3                          IO_P2M0 = IO_IN_OUT_PUT_M0 << Bit;
  70   3                          IO_P2M1 = IO_IN_OUT_PUT_M1 << Bit;
  71   3                          break;
  72   3                      case IO_OUT_PUT_PP:
  73   3                          IO_P2M0 = IO_OUT_PUT_PP_M0 << Bit;
  74   3                          IO_P2M1 = IO_OUT_PUT_PP_M1 << Bit;
  75   3                          break;
  76   3                      case IO_IN_PUT_ONLY:
  77   3                          IO_P2M0 = IO_IN_PUT_ONLY_M0 << Bit;
  78   3                          IO_P2M1 = IO_IN_PUT_ONLY_M1 << Bit;
  79   3                          break;
  80   3                      case IO_OPEN_DRAIN:
  81   3                          IO_P2M0 = IO_OPEN_DRAIN_M0 << Bit;
  82   3                          IO_P2M1 = IO_OPEN_DRAIN_M1 << Bit;
  83   3                          break;
  84   3                      default:
  85   3                          break;
  86   3                  }
  87   2                  break;
  88   2              case IO_P3: 
  89   2                  switch (mode)
  90   2                  {
  91   3                      case IO_IN_OUT_PUT:
  92   3                          IO_P3M0 = IO_IN_OUT_PUT_M0 << Bit;
  93   3                          IO_P3M1 = IO_IN_OUT_PUT_M1 << Bit;
  94   3                          break;
  95   3                      case IO_OUT_PUT_PP:
  96   3                          IO_P3M0 = IO_OUT_PUT_PP_M0 << Bit;
  97   3                          IO_P3M1 = IO_OUT_PUT_PP_M1 << Bit;
  98   3                          break;
  99   3                      case IO_IN_PUT_ONLY:
 100   3                          IO_P3M0 = IO_IN_PUT_ONLY_M0 << Bit;
 101   3                          IO_P3M1 = IO_IN_PUT_ONLY_M1 << Bit;
 102   3                          break;
 103   3                      case IO_OPEN_DRAIN:
 104   3                          IO_P3M0 = IO_OPEN_DRAIN_M0 << Bit;
 105   3                          IO_P3M1 = IO_OPEN_DRAIN_M1 << Bit;
 106   3                          break;
 107   3                      default:
 108   3                          break;
 109   3                  }
 110   2                  break;
 111   2              default:
 112   2                  break;
 113   2          }
 114   1              
 115   1              return 0;
C51 COMPILER V9.60.0.0   HW_IOCTRL                                                         06/25/2021 20:51:21 PAGE 3   

 116   1      }
 117          
 118          
 119          
 120          char io_ctrl_set_high (IOPort Port, IOBit Bit)
 121          {
 122   1          switch (Port)
 123   1          {
 124   2              case IO_P0:P0 = P0 | (0x01 << Bit);break;
 125   2              case IO_P1:P1 = P1 | (0x01 << Bit);break;
 126   2              case IO_P2:P2 = P2 | (0x01 << Bit);break;
 127   2              case IO_P3:P3 = P3 | (0x01 << Bit);break;
 128   2              default:break;
 129   2          }
 130   1      
 131   1          return 0;
 132   1      }
 133          
 134          char io_ctrl_set_low (IOPort Port, IOBit Bit)
 135          {
 136   1          switch (Port)
 137   1          {
 138   2              case IO_P0:P0 = P0 & ~(0x01 << Bit);break;
 139   2              case IO_P1:P1 = P1 & ~(0x01 << Bit);break;
 140   2              case IO_P2:P2 = P2 & ~(0x01 << Bit);break;
 141   2              case IO_P3:P3 = P3 & ~(0x01 << Bit);break;
 142   2              default:break;
 143   2          }
 144   1      
 145   1          return 0;
 146   1      }
 147          
 148          char io_ctrl_read (IOPort Port, IOBit Bit)
 149          {
 150   1          char status = -1;
 151   1      
 152   1          switch (Port)
 153   1          {
 154   2              case IO_P0:status  = P0;
 155   2                         status &= (0x01 << Bit);
 156   2                         break;
 157   2              case IO_P1:status  = P1;
 158   2                         status &= (0x01 << Bit);
 159   2                         break;
 160   2              case IO_P2:status  = P2;
 161   2                         status &= (0x01 << Bit);
 162   2                         break;
 163   2              case IO_P3:status  = P3;
 164   2                         status &= (0x01 << Bit);
 165   2                         break;
 166   2              default:break;
 167   2          }
 168   1      
 169   1          return status;
 170   1      }
 171          
 172          
 173          
 174          
 175          
 176          
 177          
C51 COMPILER V9.60.0.0   HW_IOCTRL                                                         06/25/2021 20:51:21 PAGE 4   

 178          #endif /* IOCTRL_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    677    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
