C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      06/25/2021 20:51:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SW_SOFTTIMER
OBJECT MODULE PLACED IN .\Objects\sw_SoftTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\SW_Support\sw_SoftTimer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\..\HW_Config;..\..\HW_Driver\driver_header;..\..\HW_Driver;..\..\SDKProject;..\..\SW_Support;..\..\SW_Support\header;..
                    -\..\usercode) DEBUG OBJECTEXTEND PRINT(.\Listings\sw_SoftTimer.lst) OBJECT(.\Objects\sw_SoftTimer.obj)

line level    source

   1          #include "sw_SoftTimer.h"
   2          
   3          #ifdef SW_SOFTTIMER_CONFIG
   4          
   5          
   6          #ifndef GTIMER_CONFIG
              #define GTIMER_CONFIG
              #endif /* GTIMER_CONFIG */
   9          
  10          
  11          
  12          
  13          
  14          static char TimerOBJBUDY_Findinvain(void);
  15          static char TimerOBJBUDY_push(uchar status);
  16          static char TimerOBJBUDY_pop(uchar status);
  17          /* ------------------------------------------------------------ */
  18          
  19          
  20          
  21          static SOFTTimerOBJBUDY   TimerOBJBUDY;
  22          
  23          
  24          /* ------------------------------------------------------------ */
  25          
  26          
  27          int SOFTTimer_callback (void *arg)
  28          {
  29   1              void *ptr = arg;
  30   1      
  31   1              uchar i = 0;
  32   1              
  33   1              //SOFTTimer_Stop();
  34   1      
  35   1              if (TimerOBJBUDY.OBJStatus_0 == 2) {
  36   2                      TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_remain_ms -= 1;
  37   2                      if (TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_remain_ms == 0) {
  38   3                              TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_remain_ms  = TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_ms;
  39   3                              TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_func(TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_arg);
  40   3                      }
  41   2              }
  42   1      
  43   1              if (TimerOBJBUDY.OBJStatus_1 == 2) {
  44   2                      TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_remain_ms -= 1;
  45   2                      if (TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_remain_ms == 0) {
  46   3                              TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_remain_ms  = TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_ms;
  47   3                              TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_func(TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_arg);
  48   3                      }
  49   2              }
  50   1      
  51   1              if (TimerOBJBUDY.OBJStatus_2 == 2) {
  52   2                      TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_remain_ms -= 1;
  53   2                      if (TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_remain_ms == 0) {
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      06/25/2021 20:51:19 PAGE 2   

  54   3                              TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_remain_ms  = TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_ms;
  55   3                              TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_func(TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_arg);
  56   3                      }
  57   2              }
  58   1      
  59   1              if (TimerOBJBUDY.OBJStatus_3 == 2) {
  60   2                      TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_remain_ms -= 1;
  61   2                      if (TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_remain_ms == 0) {
  62   3                              TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_remain_ms  = TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_ms;
  63   3                              TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_func(TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_arg);
  64   3                      }
  65   2              }
  66   1      
  67   1              //SOFTTimer_Start();
  68   1              
  69   1      
  70   1              return 0;
  71   1      }
  72          
  73          
  74          
  75          /* ------------------------------------------------------------ */
  76          
  77          void SOFTTimer_Init(void)
  78          {
  79   1              
  80   1              memset (&TimerOBJBUDY, 0, sizeof(TimerOBJBUDY));
  81   1              //TimerOBJBUDY.budy_status = 0x00;
  82   1              GTimer_OBJJoin(SOFTTimer_callback, NULL);
  83   1      
  84   1      }
  85          
  86          void SOFTTimer_Start()
  87          {
  88   1      
  89   1              GTimer_OBJRun (SOFTTimer_callback);
  90   1      
  91   1      }
  92          
  93          void SOFTTimer_Stop()
  94          {
  95   1      
  96   1              GTimer_OBJPause (SOFTTimer_callback);
  97   1      
  98   1      }
  99          
 100          char SOFTTimer_OBJJoin(uint timer_ms, void* callback, void* arg)
 101          {
 102   1              char status = TimerOBJBUDY_Findinvain();
 103   1              if (status < 0) {
 104   2                      return -1;
 105   2              } else {
 106   2                      TimerOBJBUDY.TimerOBJ[status].SoftTimer_obj_ms        = timer_ms/10;
 107   2                      TimerOBJBUDY.TimerOBJ[status].SoftTimer_obj_remain_ms = timer_ms/10;
 108   2                      TimerOBJBUDY.TimerOBJ[status].SoftTimer_obj_func      = callback;
 109   2                      TimerOBJBUDY.TimerOBJ[status].SoftTimer_obj_arg       = arg;
 110   2      
 111   2                      TimerOBJBUDY_push(status);
 112   2              }
 113   1              return 0;
 114   1      }
 115          
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      06/25/2021 20:51:19 PAGE 3   

 116          char SOFTTimer_OBJRemove(void* callback)
 117          {
 118   1              
 119   1              if (TimerOBJBUDY.OBJStatus_0 != 0) {
 120   2                      if (TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_func == callback ) {
 121   3                              TimerOBJBUDY_pop(0);
 122   3                              return 0;
 123   3                      }
 124   2              }
 125   1              if (TimerOBJBUDY.OBJStatus_1 != 0) {
 126   2                      if (TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_func == callback ) {
 127   3                              TimerOBJBUDY_pop(1);
 128   3                              return 1;
 129   3                      }
 130   2              }
 131   1              if (TimerOBJBUDY.OBJStatus_2 != 0) {
 132   2                      if (TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_func == callback ) {
 133   3                              TimerOBJBUDY_pop(2);
 134   3                              return 2;
 135   3                      }
 136   2              }
 137   1              if (TimerOBJBUDY.OBJStatus_3 != 0) {
 138   2                      if (TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_func == callback ) {
 139   3                              TimerOBJBUDY_pop(3);
 140   3                              return 3;
 141   3                      }
 142   2              }
 143   1      
 144   1              return -1;
 145   1      }
 146          
 147          char SOFTTimer_OBJPause(void* callback)
 148          {
 149   1              if (TimerOBJBUDY.OBJStatus_0 == 2) {
 150   2                      if (TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_func == callback ) {
 151   3                              TimerOBJBUDY.OBJStatus_0 = 1;
 152   3                              return 0;
 153   3                      }
 154   2              }
 155   1              if (TimerOBJBUDY.OBJStatus_1 == 2) {
 156   2                      if (TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_func == callback ) {
 157   3                              TimerOBJBUDY.OBJStatus_1 = 1;
 158   3                              return 1;
 159   3                      }
 160   2              }
 161   1              if (TimerOBJBUDY.OBJStatus_2 == 2) {
 162   2                      if (TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_func == callback ) {
 163   3                              TimerOBJBUDY.OBJStatus_2 = 1;
 164   3                              return 2;
 165   3                      }
 166   2              }
 167   1              if (TimerOBJBUDY.OBJStatus_3 == 2) {
 168   2                      if (TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_func == callback ) {
 169   3                              TimerOBJBUDY.OBJStatus_3 = 1;
 170   3                              return 3;
 171   3                      }
 172   2              }
 173   1              
 174   1              return -1;
 175   1      }
 176          
 177          char SOFTTimer_OBJRun(void* callback)
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      06/25/2021 20:51:19 PAGE 4   

 178          {
 179   1              if (TimerOBJBUDY.OBJStatus_0 == 1) {
 180   2                      if (TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_func == callback ) {
 181   3                              TimerOBJBUDY.OBJStatus_0 = 2;
 182   3                              return 0;
 183   3                      }
 184   2              }
 185   1              if (TimerOBJBUDY.OBJStatus_1 == 1) {
 186   2                      if (TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_func == callback ) {
 187   3                              TimerOBJBUDY.OBJStatus_1 = 2;
 188   3                              return 1;
 189   3                      }
 190   2              }
 191   1              if (TimerOBJBUDY.OBJStatus_2 == 1) {
 192   2                      if (TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_func == callback ) {
 193   3                              TimerOBJBUDY.OBJStatus_2 = 2;
 194   3                              return 2;
 195   3                      }
 196   2              }
 197   1              if (TimerOBJBUDY.OBJStatus_3 == 1) {
 198   2                      if (TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_func == callback ) {
 199   3                              TimerOBJBUDY.OBJStatus_3 = 2;
 200   3                              return 3;
 201   3                      }
 202   2              }
 203   1              
 204   1              return -1;
 205   1      }
 206          
 207          
 208          /* ------------------------------------------------------------ */
 209          
 210          static char TimerOBJBUDY_Findinvain(void)
 211          {
 212   1              uchar status = -1;
 213   1      
 214   1              if (TimerOBJBUDY.OBJStatus_0 == 0) {
 215   2                      status = 0;
 216   2              } else if (TimerOBJBUDY.OBJStatus_1 == 0) {
 217   2                      status = 1;
 218   2              } else if (TimerOBJBUDY.OBJStatus_2 == 0) {
 219   2                      status = 2;
 220   2              } else if (TimerOBJBUDY.OBJStatus_3 == 0) {
 221   2                      status = 3;
 222   2              } else {
 223   2                      status = -1;
 224   2              }
 225   1      
 226   1              return status;
 227   1      }
 228          
 229          static char TimerOBJBUDY_push(uchar status)
 230          {
 231   1      
 232   1              switch (status)
 233   1              {
 234   2                      case 0:TimerOBJBUDY.OBJStatus_0 = 1;break;
 235   2                      case 1:TimerOBJBUDY.OBJStatus_1 = 1;break;
 236   2                      case 2:TimerOBJBUDY.OBJStatus_2 = 1;break;
 237   2                      case 3:TimerOBJBUDY.OBJStatus_3 = 1;break;
 238   2                      default:break;
 239   2              }
C51 COMPILER V9.60.0.0   SW_SOFTTIMER                                                      06/25/2021 20:51:19 PAGE 5   

 240   1      
 241   1              return 0;
 242   1      }
 243          
 244          static char TimerOBJBUDY_pop(uchar status)
 245          {
 246   1              
 247   1              switch (status)
 248   1              {
 249   2                      case 0:TimerOBJBUDY.OBJStatus_0 = 0;
 250   2                             TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_func = NULL;
 251   2                             TimerOBJBUDY.TimerOBJ[0].SoftTimer_obj_arg  = NULL;
 252   2                             break;
 253   2                      case 1:TimerOBJBUDY.OBJStatus_1 = 0;
 254   2                             TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_func = NULL;
 255   2                             TimerOBJBUDY.TimerOBJ[1].SoftTimer_obj_arg  = NULL;
 256   2                             break;
 257   2                      case 2:TimerOBJBUDY.OBJStatus_2 = 0;
 258   2                             TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_func = NULL;
 259   2                             TimerOBJBUDY.TimerOBJ[2].SoftTimer_obj_arg  = NULL;
 260   2                             break;
 261   2                      case 3:TimerOBJBUDY.OBJStatus_3 = 0;
 262   2                             TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_func = NULL;
 263   2                             TimerOBJBUDY.TimerOBJ[3].SoftTimer_obj_arg  = NULL;
 264   2                             break;
 265   2                      default:break;
 266   2              }
 267   1      
 268   1              return 0;
 269   1      }
 270          
 271          
 272          /* ------------------------------------------------------------ */
 273          
 274          #endif /* SW_SOFTTIMER_CONFIG */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1494    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     44      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
